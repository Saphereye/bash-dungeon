#!/usr/bin/env bash

mv ../.room2 ../room2 2>/dev/null
(return 0 2>/dev/null) && sourced=1 || sourced=0
if [[ $sourced == 0 ]]; then
	echo "YOU MUST SOURCE THIS SCRIPT"
	exit 1
fi

if [[ -z $gold ]]; then
	echo "YOU HAVE NOT SET YOUR GOLD VARIABLE!"
fi

write_dart() {
	cat <<'EOF' >dart
Darts allow you to attack enemies from 

A distance without risking your HP.

Add this item to your inventory,

By now you should know how.

EOF
}

write_portal() {
	cat <<'EOF' >portal
We can create symlinks (symbolic links) in linux.

symlinks are shortcuts to files, binaries or directories.

Lets create a symlink from the poem you found a few dungeons back

to the current directory.

The spell for a symlink is:

< ln -s original_path destination_path > 

Remember that < .. > means behind and < . > means here.

Make a symlink with:

< ln -s ../../../poem . >

Then you can use 'cat' to read the poem right here,

eventhough its three directories behind.
EOF
}

write_poh() {
	cat <<'EOF' >potion_of_health
Add this point, you should have two PoHs.

You might want to create a dedicated variable 

to hold the value of how many PoHs you have. 

The game will check for $PoH from now on.

By now, you should know how to do that.

You can check how many PoHs you have with:

< echo $PoH >
EOF
}

write_pom() {
	cat <<'EOF' >potion_of_magic
The PoM comes in handy in a future room.

You might want to create a dedicated variable 

to hold the value of how many PoMs you have. 

The game will check for $PoM from now on.

By now, you should know how to do that.

You can check how many PoMs you have with:

< echo $PoM >
EOF
}

write_trick() {
	cat <<'EOF' >trick
The shell uses emacs bindings by default.

Emacs is the GNU editor and its a rather complicated one.

We are only concered with a handful of emacs key bindings.

Ctrl+l => Clear the screen
Ctrl+u => Clear the entire line

Ctrl+a => Jump to the start of line
Ctrl+e => Jump to the end of line

Alt+b  => Jump back by a word
Alt+f  => Jump forward by a word

These should be enough to get you started.
EOF
}

echo -e "Welcome to the Bash Shop!\n"
echo -e "Enter the number of the item\n"
echo -e "Ctrl+C to exit\n"
echo -e "What do you wish to buy?\n"
select item in Dart Portal PoH PoM Trick; do
	case $item in
	Dart)
		price=2
		if [[ gold -ge 2 ]]; then write_dart; fi
		;;
	Portal)
		price=4
		if [[ gold -ge 4 ]]; then write_portal; fi
		;;
	PoH)
		price=9
		if [[ gold -ge 9 ]]; then write_poh; fi
		;;
	PoM)
		price=10
		if [[ gold -ge 10 ]]; then write_pom; fi
		;;
	Trick)
		price=3
		if [[ gold -ge 3 ]]; then write_trick; fi
		write_trick
		;;
	*)
		echo "Invalid option. Please select a valid number."
		continue
		;;
	esac

	echo "You selected $item."
	echo "Price: $price Gold"
	echo "Do you wish to purchase $item y/n?"
	read -r ans
	if [[ $ans == y ]] && [[ $gold -ge $price ]]; then
		((gold -= price))
		echo "You have $gold remaining Gold"
	else
		echo "You don't have enough Gold"
		echo "Be gone, peasant!"
	fi
done
